const Lexer = require('../../src/lexer')

describe('test lexer', () => {
    it('test lexer newline', () => {
        const lexer = new Lexer()
        const state = lexer.lex('\n\n')
        expect(state.tokens.length).toEqual(1)
        expect(state.tokens[0].type).toEqual('space')
    })
    it('test lexer toc', () => {
        const lexer = new Lexer()
        const state = lexer.lex('[TOC]')
        expect(state.tokens.length).toEqual(1)
        expect(state.tokens[0].type).toEqual('toc')
    })
    it('test lexer code', () => {
        const lexer = new Lexer()
        const state = lexer.lex('    function test(){\n        return true\n    }\n')
        expect(state.tokens.length).toEqual(1)
        expect(state.tokens[0].type).toEqual('code')
        expect(state.tokens[0].text).toEqual('function test(){\n    return true\n}')
    })
    it('test lexer fences', () => {
        const lexer = new Lexer()
        const state = lexer.lex('``` javascript\nfunction test(){\n    return true\n}\n```')
        expect(state.tokens.length).toEqual(1)
        expect(state.tokens[0].type).toEqual('code')
        expect(state.tokens[0].lang).toEqual('javascript')
        expect(state.tokens[0].text).toEqual('function test(){\n    return true\n}')
    })
    it('test lexer heading', () => {
        const lexer = new Lexer()
        const state = lexer.lex('# test \n## test2\n ### test3')
        expect(state.tokens.length).toEqual(3)
        expect(state.tocs.length).toEqual(3)
        expect(state.tokens[0].type).toEqual('heading')
        expect(state.tokens[0].text).toEqual('test')
        expect(state.tokens[0].depth).toEqual(1)
        expect(state.tokens[1].type).toEqual('heading')
        expect(state.tokens[1].text).toEqual('test2')
        expect(state.tokens[1].depth).toEqual(2)
        expect(state.tokens[2].type).toEqual('heading')
        expect(state.tokens[2].text).toEqual('test3')
        expect(state.tokens[2].depth).toEqual(3)
    })
    it('test lexer nptable', () => {
        const lexer = new Lexer()
        const tebleStr = 'Header 1 | Header 2 | Header 3 | Header 4\n--------: | :-------- | :---: | -- |\nCell 1   | Cell 2  | Cell 3  | Cell 4\nCell 5 | Cell 6 | Cell 7  | Cell 8'
        const state = lexer.lex(tebleStr)
        expect(state.tokens.length).toEqual(1)
        expect(state.tokens[0].type).toEqual('table')
        expect(state.tokens[0].header).toEqual(['Header 1', 'Header 2', 'Header 3', 'Header 4'])
        expect(state.tokens[0].align).toEqual(['right', 'left', 'center', null])
    })
    it('test lexer lheading', () => {
        const lexer = new Lexer()
        const state = lexer.lex('test\n====\n\ntest2\n---')
        expect(state.tokens.length).toEqual(2)
        expect(state.tocs.length).toEqual(2)
        expect(state.tokens[0].type).toEqual('heading')
        expect(state.tokens[0].text).toEqual('test')
        expect(state.tokens[0].depth).toEqual(1)
        expect(state.tokens[1].type).toEqual('heading')
        expect(state.tokens[1].text).toEqual('test2')
        expect(state.tokens[1].depth).toEqual(2)
    })
    it('test lexer hr', () => {
        const lexer = new Lexer()
        const state = lexer.lex('----\n***\n\n___')
        expect(state.tokens.length).toEqual(3)
        expect(state.tokens[0].type).toEqual('hr')
        expect(state.tokens[1].type).toEqual('hr')
        expect(state.tokens[2].type).toEqual('hr')
    })
    it('test lexer blockquote', () => {
        const lexer = new Lexer()
        const state = lexer.lex('> test\n\n> test')
        expect(state.tokens.length).toEqual(4)
        expect(state.tokens[0].type).toEqual('blockquote_start')
        expect(state.tokens[1].type).toEqual('paragraph')
        expect(state.tokens[2].type).toEqual('paragraph')
        expect(state.tokens[3].type).toEqual('blockquote_end')
    })
    it('test lexer list', () => {
        const lexer = new Lexer()
        const state = lexer.lex('1. dsfd\n\n2. sdfsd')
        expect(state.tokens.length).toEqual(6)
        console.log(state.tokens)
    })
})
